# -*- coding: utf-8 -*-
"""LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iqIDcvaDSscEnpNXN5ul0f68C7-eA831

#Md Ibrahim
# ID: 201-35-640
#  Section: A2
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

data = pd.read_csv('/content/.config/linear-regression-dataset (2).csv')

print(data)

"""# Define the independent variables (features) and the dependent variable (target)"""

X = data[['Hours', 'Practice', 'TeamWork']]
y = data['Scores']

"""# Split the data into training and testing sets"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)

print("Mean Squared Error:", mse)

from sklearn.metrics import r2_score

r2 = r2_score(y_test, y_pred)

print("R-squared:", r2)

coefficients = model.coef_
intercept = model.intercept_

print("Coefficients (Weights):")
print("Hours:", coefficients[0])
print("Practice:", coefficients[1])
print("TeamWork:", coefficients[2])
print("Intercept:", intercept)

"""# Create a linear regression model with fit_intercept=True (default)"""

model_with_intercept = LinearRegression(fit_intercept=True)
model_with_intercept.fit(X_train, y_train)
y_pred_with_intercept = model_with_intercept.predict(X_test)

mse_with_intercept = mean_squared_error(y_test, y_pred_with_intercept)
r2_with_intercept = r2_score(y_test, y_pred_with_intercept)

"""# Create a linear regression model with fit_intercept=False"""

model_without_intercept = LinearRegression(fit_intercept=False)
model_without_intercept.fit(X_train, y_train)
y_pred_without_intercept = model_without_intercept.predict(X_test)

"""# Evaluate the model without intercept"""

mse_without_intercept = mean_squared_error(y_test, y_pred_without_intercept)
r2_without_intercept = r2_score(y_test, y_pred_without_intercept)

print("With Intercept - Mean Squared Error:", mse_with_intercept)
print("With Intercept - R-squared:", r2_with_intercept)

print("Without Intercept - Mean Squared Error:", mse_without_intercept)
print("Without Intercept - R-squared:", r2_without_intercept)

from sklearn.linear_model import SGDRegressor

model = SGDRegressor(
    max_iter=1000,
    tol=1e-3,
    shuffle=True,
    verbose=0,
    random_state=42,
    learning_rate='constant',
    eta0=0.01,
    power_t=0.25,
    early_stopping=True,
    validation_fraction=0.2,
    n_iter_no_change=10
)

# Fit the model to your training data
model.fit(X_train, y_train)

model = SGDRegressor(
    max_iter=1000,
    tol=1e-3,
    early_stopping=True,
    validation_fraction=0.1,
    n_iter_no_change=10
)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

validation_fraction = 0.1

model = SGDRegressor(
    max_iter=1000,
    tol=1e-3,
    early_stopping=True,
    validation_fraction=validation_fraction,
    n_iter_no_change=10
)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

n_iter_no_change = 10

model = SGDRegressor(
    max_iter=1000,
    tol=1e-3,
    early_stopping=True,
    validation_fraction=0.1,
    n_iter_no_change=n_iter_no_change
)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

power_t = 0.25

# Create an SGDRegressor instance with learning_rate='invscaling' and power_t
model = SGDRegressor(
    max_iter=1000,
    tol=1e-3,
    early_stopping=True,
    validation_fraction=0.1,
    n_iter_no_change=10,
    learning_rate='invscaling',
    eta0=0.01,
    power_t=power_t
)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model using metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

shuffle = True

# Create an SGDRegressor instance with shuffle
model = SGDRegressor(
    max_iter=1000,
    tol=1e-3,
    early_stopping=True,
    validation_fraction=0.1,
    n_iter_no_change=10,
    shuffle=shuffle
)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model using metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

verbose = 1

# Create an SGDRegressor instance with verbose
model = SGDRegressor(
    max_iter=1000,
    tol=1e-3,
    early_stopping=True,
    validation_fraction=0.1,
    n_iter_no_change=10,
    verbose=verbose
)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model using metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)